/* 
 * (@ filename @).c 
 *
 * (@ author @) <(@ email @)>
 * Created on: (@ time @)
 *
 * Copyright (C) 
 * 
 * (@ filename @).c is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * (@ filename @).c is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#if HAVE_CONFIG_H
#include "config.h"
#endif

#include "(@ filename @).h"

#define (@ packname_upper @)_(@ widgname_upper @)_GET_PRIVATE(obj) \
            (G_TYPE_INSTANCE_GET_PRIVATE ((obj),(@ packname_upper @)_TYPE_(@ widgname_upper @),(@ iname @)Private))

struct _(@ iname @)Private
{
    /* < private data > */
    
};

static void (@ packname @)_(@ widgname @)_dispose(GObject* gobject){
    (@ iname @)* self;
    (@ iname @)Class* klass;
    (@ iname @)Private* priv;
    
    self  = (@ packname_upper @)_(@ widgname_upper @)(gobject);
    klass = (@ packname_upper @)_(@ widgname_upper @)_GET_CLASS(self);
    priv  = self->private;

    G_OBJECT_CLASS(g_type_class_peek_parent(klass))->dispose(gobject);
}

static void (@ packname @)_(@ widgname @)_finalize(GObject* gobject){
    (@ iname @)* self;
    (@ iname @)Class* klass;
    (@ iname @)Private* priv;
    
    self  = (@ packname_upper @)_(@ widgname_upper @)(gobject);
    klass = (@ packname_upper @)_(@ widgname_upper @)_GET_CLASS(self);
    priv  = self->private;

    G_OBJECT_CLASS(g_type_class_peek_parent(klass))->finalize(gobject);
}


static void (@ packname @)_(@ widgname @)_class_init((@ iname @)Class *klass){
    GObjectClass *gobject_class = G_OBJECT_CLASS (klass);

    gobject_class->dispose  = (@ packname @)_(@ widgname @)_dispose;
    gobject_class->finalize = (@ packname @)_(@ widgname @)_finalize;

    g_type_class_add_private(klass, sizeof((@ iname @)Private));
}

static void (@ packname @)_(@ widgname @)_instance_init((@ iname @) *self, gpointer g_class){
    (@ iname @)Private* priv;

    priv = (@ packname_upper @)_(@ widgname_upper @)_GET_PRIVATE(self);
    self->private = priv;

}

(@ iname @)* (@ packname @)_(@ widgname @)_new(void){
    (@ iname @)* self;
    
    self = g_object_new((@ packname_upper @)_TYPE_(@ widgname_upper @),NULL);

    return self;
}

GType (@ packname @)_(@ widgname @)_get_type(void)
{
    static GType type = 0;

    if (G_UNLIKELY(type == 0)){
        static const GTypeInfo info = {
            sizeof((@ iname @)Class),
            NULL,   /* base_init */
            NULL,   /* base_finalize */
            (GClassInitFunc) (@ packname @)_(@ widgname @)_class_init,   /* class_init */
            NULL,   /* class_finalize */
            NULL,   /* class_data */
            sizeof ((@ iname @)),
            0,      /* n_preallocs */
            (GInstanceInitFunc)(@ packname @)_(@ widgname @)_instance_init    /* instance_init */
        };
        type = g_type_register_static ((@ parent_type @),"(@ iname @)",&info, 0);
    }
    return type;
};
